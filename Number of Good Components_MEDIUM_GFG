class Solution:
    def __init__(self):
        self.graph = []
        self.vis = []
        self.chk = []
        self.sz = 0

    def dfs(self, node):
        self.vis[node] = 1
        self.sz += 1
        for it in self.graph[node]:
            if not self.vis[it]:
                self.dfs(it)

    def ok(self, node, sz):
        self.chk[node] = 1
        if len(self.graph[node]) != sz - 1:
            return False
        for adj in self.graph[node]:
            if not self.chk[adj]:
                if not (len(self.graph[adj]) == sz - 1 and self.ok(adj, sz)):
                    return False
        return True

    def findNumberOfGoodComponent(self, e, v, edges):
        self.graph = [[] for _ in range(v + 1)]
        for i in range(e):
            self.graph[edges[i][0]].append(edges[i][1])
            self.graph[edges[i][1]].append(edges[i][0])
        self.vis = [0 for _ in range(v + 1)]
        fans = 0
        for i in range(1, v + 1):
            if not self.vis[i]:
                self.sz = 0
                self.dfs(i)
                self.chk = [0 for _ in range(v + 1)]
                if self.ok(i, self.sz):
                    fans += 1
        return fans
